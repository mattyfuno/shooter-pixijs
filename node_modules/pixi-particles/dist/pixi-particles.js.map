{"version":3,"file":"pixi-particles.js","sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/PolygonalChain.ts","../src/Emitter.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts"],"sourcesContent":["import { ParticleUtils, EaseSegment, SimpleEase, Color } from './ParticleUtils';\nimport { BasicTweenable } from './EmitterConfig';\n\nexport interface ValueStep<T> {\n    value: T;\n    time: number;\n}\n\nexport interface ValueList<T> {\n    list: ValueStep<T>[];\n    isStepped?: boolean;\n    ease?: SimpleEase|EaseSegment[];\n}\n/**\n * A single node in a PropertyList.\n */\nexport class PropertyNode<V>\n{\n    /**\n     * Value for the node.\n     */\n    public value: V;\n    /**\n     * Time value for the node. Between 0-1.\n     */\n    public time: number;\n    /**\n     * The next node in line.\n     */\n    public next: PropertyNode<V>;\n    /**\n     * If this is the first node in the list, controls if the entire list is stepped or not.\n     */\n    public isStepped: boolean;\n    public ease: SimpleEase;\n\n    /**\n     * @param value The value for this node\n     * @param time The time for this node, between 0-1\n     * @param [ease] Custom ease for this list. Only relevant for the first node.\n     */\n    constructor(value: V, time: number, ease?: SimpleEase|EaseSegment[])\n    {\n        this.value = value;\n        this.time = time;\n        this.next = null;\n        this.isStepped = false;\n        if (ease)\n        {\n            this.ease = typeof ease === 'function' ? ease : ParticleUtils.generateEase(ease);\n        }\n        else\n        {\n            this.ease = null;\n        }\n    }\n\n    /**\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n     * {start, end}.\n     * @param data The data for the list.\n     * @param data.list The array of value and time objects.\n     * @param data.isStepped If the list is stepped rather than interpolated.\n     * @param data.ease Custom ease for this list.\n     * @return The first node in the list\n     */\n    // eslint-disable-next-line max-len\n    public static createList<T extends(string|number)>(data: ValueList<T>|BasicTweenable<T>): PropertyNode<T extends string ? Color : T>\n    {\n        if ('list' in data)\n        {\n            const array = data.list;\n            let node;\n            const { value, time } = array[0];\n\n            // eslint-disable-next-line max-len\n            const first = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\n\n            // only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n            if (array.length > 2 || (array.length === 2 && array[1].value !== value))\n            {\n                for (let i = 1; i < array.length; ++i)\n                {\n                    const { value, time } = array[i];\n\n                    node.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\n                    node = node.next;\n                }\n            }\n            first.isStepped = !!data.isStepped;\n\n            return first as PropertyNode<T extends string ? Color : T>;\n        }\n\n        // Handle deprecated version here\n        const start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\n        // only set up a next value if it is different from the starting value\n\n        if (data.end !== data.start)\n        {\n            start.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\n        }\n\n        return start as PropertyNode<T extends string ? Color : T>;\n    }\n}\n","import { BLEND_MODES, Point, Texture } from 'pixi.js';\nimport { PropertyNode, ValueStep } from './PropertyNode';\n// eslint-disable-next-line no-duplicate-imports\nimport * as pixi from 'pixi.js';\n// get Texture.from()/Texture.fromImage(), in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet TextureFromString: (s: string) => pixi.Texture;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\n\nif (parseInt((/^(\\d+)\\./).exec(pixi.VERSION)[1], 10) < 5)\n{\n    TextureFromString = pixiNS.Texture.fromImage;\n}\nelse\n{\n    TextureFromString = (pixiNS as any).Texture.from;\n}\n\nexport function GetTextureFromString(s: string): Texture\n{\n    return TextureFromString(s);\n}\n\nexport interface Color {\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n}\n\nexport interface EaseSegment {\n    cp: number;\n    s: number;\n    e: number;\n}\n\nexport type SimpleEase = (time: number) => number;\n\n/**\n * Contains helper functions for particles and emitters to use.\n */\nexport namespace ParticleUtils {\n    /**\n     * If errors and warnings should be logged within the library.\n     */\n    export const verbose = false;\n\n    export const DEG_TO_RADS = Math.PI / 180;\n\n    /**\n     * Rotates a point by a given angle.\n     * @param angle The angle to rotate by in degrees\n     * @param p The point to rotate around 0,0.\n     */\n    export function rotatePoint(angle: number, p: Point): void\n    {\n        if (!angle) return;\n        angle *= ParticleUtils.DEG_TO_RADS;\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        const xnew = (p.x * c) - (p.y * s);\n        const ynew = (p.x * s) + (p.y * c);\n\n        p.x = xnew;\n        p.y = ynew;\n    }\n\n    /**\n     * Combines separate color components (0-255) into a single uint color.\n     * @param r The red value of the color\n     * @param g The green value of the color\n     * @param b The blue value of the color\n     * @return The color in the form of 0xRRGGBB\n     */\n    export function combineRGBComponents(r: number, g: number, b: number/* , a*/): number\n    {\n        return /* a << 24 |*/ (r << 16) | (g << 8) | b;\n    }\n\n    /**\n     * Reduces the point to a length of 1.\n     * @param point The point to normalize\n     */\n    export function normalize(point: Point): void\n    {\n        const oneOverLen = 1 / ParticleUtils.length(point);\n\n        point.x *= oneOverLen;\n        point.y *= oneOverLen;\n    }\n\n    /**\n     * Multiplies the x and y values of this point by a value.\n     * @param point The point to scaleBy\n     * @param value The value to scale by.\n     */\n    export function scaleBy(point: Point, value: number): void\n    {\n        point.x *= value;\n        point.y *= value;\n    }\n\n    /**\n     * Returns the length (or magnitude) of this point.\n     * @param point The point to measure length\n     * @return The length of this point.\n     */\n    export function length(point: Point): number\n    {\n        return Math.sqrt((point.x * point.x) + (point.y * point.y));\n    }\n\n    /**\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n     * {r, g, b, (a)}.\n     * @param color The input color string.\n     * @param output An object to put the output in. If omitted, a new object is created.\n     * @return The object with r, g, and b properties, possibly with an a property.\n     */\n    export function hexToRGB(color: string, output?: Color): Color\n    {\n        if (!output)\n        {\n            output = {} as Color;\n        }\n        if (color.charAt(0) === '#')\n        {\n            color = color.substr(1);\n        }\n        else if (color.indexOf('0x') === 0)\n        {\n            color = color.substr(2);\n        }\n        let alpha;\n\n        if (color.length === 8)\n        {\n            alpha = color.substr(0, 2);\n            color = color.substr(2);\n        }\n        output.r = parseInt(color.substr(0, 2), 16);// Red\n        output.g = parseInt(color.substr(2, 2), 16);// Green\n        output.b = parseInt(color.substr(4, 2), 16);// Blue\n        if (alpha)\n        {\n            output.a = parseInt(alpha, 16);\n        }\n\n        return output;\n    }\n\n    /**\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n     * by the related tool at http://www.greensock.com/customease/.\n     * @param segments An array of segments, as created by\n     * http://www.greensock.com/customease/.\n     * @return A function that calculates the percentage of change at\n     *                    a given point in time (0-1 inclusive).\n     */\n    export function generateEase(segments: EaseSegment[]): SimpleEase\n    {\n        const qty = segments.length;\n        const oneOverQty = 1 / qty;\n        /*\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\n         * @param {Number} time The time of the ease, 0-1 inclusive.\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n         *                  ease goes outside those bounds).\n         */\n\n        // eslint-disable-next-line func-names\n        return function (time: number): number\n        {\n            const i = (qty * time) | 0;// do a quick floor operation\n\n            const t = (time - (i * oneOverQty)) * qty;\n            const s = segments[i] || segments[qty - 1];\n\n            return (s.s + (t * ((2 * (1 - t) * (s.cp - s.s)) + (t * (s.e - s.s)))));\n        };\n    }\n\n    /**\n     * Gets a blend mode, ensuring that it is valid.\n     * @param name The name of the blend mode to get.\n     * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n     */\n    export function getBlendMode(name: string): number\n    {\n        if (!name) return BLEND_MODES.NORMAL;\n        name = name.toUpperCase();\n        while (name.indexOf(' ') >= 0)\n        {\n            name = name.replace(' ', '_');\n        }\n\n        return (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n     * @param list The list of data to convert.\n     * @param [numSteps=10] The number of steps to use.\n     * @return The blend mode as specified in the PIXI.blendModes enumeration.\n     */\n    export function createSteppedGradient(list: ValueStep<string>[], numSteps = 10): PropertyNode<Color>\n    {\n        if (typeof numSteps !== 'number' || numSteps <= 0)\n        {\n            numSteps = 10;\n        }\n        const first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\n\n        first.isStepped = true;\n        let currentNode = first;\n        let current = list[0];\n        let nextIndex = 1;\n        let next = list[nextIndex];\n\n        for (let i = 1; i < numSteps; ++i)\n        {\n            let lerp = i / numSteps;\n            // ensure we are on the right segment, if multiple\n\n            while (lerp > next.time)\n            {\n                current = next;\n                next = list[++nextIndex];\n            }\n            // convert the lerp value to the segment range\n            lerp = (lerp - current.time) / (next.time - current.time);\n            const curVal = ParticleUtils.hexToRGB(current.value);\n            const nextVal = ParticleUtils.hexToRGB(next.value);\n            const output: Color = {\n                r: ((nextVal.r - curVal.r) * lerp) + curVal.r,\n                g: ((nextVal.g - curVal.g) * lerp) + curVal.g,\n                b: ((nextVal.b - curVal.b) * lerp) + curVal.b,\n            };\n\n            currentNode.next = new PropertyNode(output, i / numSteps);\n            currentNode = currentNode.next;\n        }\n\n        // we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n        // the particle has died of old age\n        return first;\n    }\n}\n","import { ParticleUtils, SimpleEase, Color } from './ParticleUtils';\nimport { PropertyNode } from './PropertyNode';\n\nfunction intValueSimple(this: PropertyList<number>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n\n    return ((this.next.value - this.current.value) * lerp) + this.current.value;\n}\n\nfunction intColorSimple(this: PropertyList<Color>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n    const curVal = this.current.value; const\n        nextVal = this.next.value;\n    const r = ((nextVal.r - curVal.r) * lerp) + curVal.r;\n    const g = ((nextVal.g - curVal.g) * lerp) + curVal.g;\n    const b = ((nextVal.b - curVal.b) * lerp) + curVal.b;\n\n    return ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueComplex(this: PropertyList<number>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n    // make sure we are on the right segment\n    while (lerp > this.next.time)\n    {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    // convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\n    return ((this.next.value - this.current.value) * lerp) + this.current.value;\n}\n\nfunction intColorComplex(this: PropertyList<Color>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n    // make sure we are on the right segment\n    while (lerp > this.next.time)\n    {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    // convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n    const curVal = this.current.value; const\n        nextVal = this.next.value;\n    const r = ((nextVal.r - curVal.r) * lerp) + curVal.r;\n    const g = ((nextVal.g - curVal.g) * lerp) + curVal.g;\n    const b = ((nextVal.b - curVal.b) * lerp) + curVal.b;\n\n    return ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueStepped(this: PropertyList<number>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n    // make sure we are on the right segment\n    while (this.next && lerp > this.next.time)\n    {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n\n    return this.current.value;\n}\n\nfunction intColorStepped(this: PropertyList<Color>, lerp: number): number\n{\n    if (this.ease)\n    { lerp = this.ease(lerp); }\n    // make sure we are on the right segment\n    while (this.next && lerp > this.next.time)\n    {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    const curVal = this.current.value;\n\n    return ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}\n\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n */\nexport class PropertyList<V>\n{\n    /**\n     * The current property node in the linked list.\n     */\n    public current: PropertyNode<V>;\n    /**\n     * The next property node in the linked list. Stored separately for slightly less variable\n     * access.\n     */\n    public next: PropertyNode<V>;\n    /**\n     * Calculates the correct value for the current interpolation value. This method is set in\n     * the reset() method.\n     * @param lerp The interpolation value from 0-1.\n     * @return The interpolated value. Colors are converted to the hex value.\n     */\n    public interpolate: (lerp: number) => number;\n    /**\n     * A custom easing method for this list.\n     * @param lerp The interpolation value from 0-1.\n     * @return The eased value, also from 0-1.\n     */\n    public ease: SimpleEase;\n    /**\n     * If this list manages colors, which requires a different method for interpolation.\n     */\n    private isColor: boolean;\n\n    /**\n     * @param isColor If this list handles color values\n     */\n    constructor(isColor = false)\n    {\n        this.current = null;\n        this.next = null;\n        this.isColor = !!isColor;\n        this.interpolate = null;\n        this.ease = null;\n    }\n\n    /**\n     * Resets the list for use.\n     * @param first The first node in the list.\n     * @param first.isStepped If the values should be stepped instead of interpolated linearly.\n     */\n    public reset(first: PropertyNode<V>): void\n    {\n        this.current = first;\n        this.next = first.next;\n        const isSimple = this.next && this.next.time >= 1;\n\n        if (isSimple)\n        {\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\n        }\n        else if (first.isStepped)\n        {\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\n        }\n        else\n        {\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\n        }\n        this.ease = this.current.ease;\n    }\n}\n","import { Emitter } from './Emitter';\nimport { ParticleUtils, SimpleEase, Color, GetTextureFromString } from './ParticleUtils';\nimport { PropertyList } from './PropertyList';\nimport { Sprite, Point, Texture } from 'pixi.js';\n\n/**\n * An individual particle image. You shouldn't have to deal with these.\n */\nexport class Particle extends Sprite\n{\n    /**\n     * The emitter that controls this particle.\n     */\n    public emitter: Emitter;\n    /**\n     * The velocity of the particle. Speed may change, but the angle also\n     * contained in velocity is constant.\n     */\n    public velocity: Point;\n    /**\n     * The maximum lifetime of this particle, in seconds.\n     */\n    public maxLife: number;\n    /**\n     * The current age of the particle, in seconds.\n     */\n    public age: number;\n    /**\n     * A simple easing function to be applied to all properties that\n     * are being interpolated.\n     */\n    public ease: SimpleEase;\n    /**\n     * Extra data that the emitter passes along for custom particles.\n     */\n    public extraData: any;\n    /**\n     * The alpha of the particle throughout its life.\n     */\n    public alphaList: PropertyList<number>;\n    /**\n     * The speed of the particle throughout its life.\n     */\n    public speedList: PropertyList<number>;\n    /**\n     * A multiplier from 0-1 applied to the speed of the particle at all times.\n     */\n    public speedMultiplier: number;\n    /**\n     * Acceleration to apply to the particle.\n     */\n    public acceleration: Point;\n    /**\n     * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n     * will disable the maximum speed.\n     */\n    public maxSpeed: number;\n    /**\n     * Speed at which the particle rotates, in radians per second.\n     */\n    public rotationSpeed: number;\n\n    /**\n     * Acceleration of rotation (angular acceleration) to apply to the particle.\n     */\n    public rotationAcceleration: number;\n\n    /**\n     * If particle rotation is locked, preventing rotation from occurring due\n     * to directional changes.\n     */\n    public noRotation: boolean;\n    /**\n     * The scale of the particle throughout its life.\n     */\n    public scaleList: PropertyList<number>;\n    /**\n     * A multiplier from 0-1 applied to the scale of the particle at all times.\n     */\n    public scaleMultiplier: number;\n    /**\n     * The tint of the particle throughout its life.\n     */\n    public colorList: PropertyList<Color>;\n    /**\n     * A reference to init, so that subclasses can access it without the penalty of Function.call()\n     */\n    protected Particle_init: typeof Particle.prototype.init;\n    /**\n     * A reference to update so that subclasses can access the original without the overhead\n     * of Function.call().\n     * @param delta Time elapsed since the previous frame, in __seconds__.\n     * @return The standard interpolation multiplier (0-1) used for all relevant particle\n     *                   properties. A value of -1 means the particle died of old age instead.\n     */\n    protected Particle_update: typeof Particle.prototype.update;\n    protected Particle_destroy: typeof Particle.prototype.destroy;\n    protected Sprite_destroy: typeof Sprite.prototype.destroy;\n    /**\n     * If alpha should be interpolated at all.\n     */\n    protected _doAlpha: boolean;\n    /**\n     * If scale should be interpolated at all.\n     */\n    protected _doScale: boolean;\n    /**\n     * If speed should be interpolated at all.\n     */\n    protected _doSpeed: boolean;\n    /**\n     * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n     * and _doSpeed gets priority.\n     */\n    protected _doAcceleration: boolean;\n    /**\n     * If color should be interpolated at all.\n     */\n    protected _doColor: boolean;\n    /**\n     * If normal movement should be handled. Subclasses wishing to override movement\n     * can set this to false in init().\n     */\n    protected _doNormalMovement: boolean;\n    /**\n     * One divided by the max life of the particle, saved for slightly faster math.\n     */\n    private _oneOverLife: number;\n    /**\n     * Reference to the next particle in the list.\n     */\n    public next: Particle;\n\n    /**\n     * Reference to the previous particle in the list.\n     */\n    public prev: Particle;\n\n    /**\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n     */\n    constructor(emitter: Emitter)\n    {\n        // start off the sprite with a blank texture, since we are going to replace it\n        // later when the particle is initialized.\n        super();\n        this.emitter = emitter;\n        // particles should be centered\n        this.anchor.x = this.anchor.y = 0.5;\n        this.velocity = new Point();\n        this.rotationSpeed = 0;\n        this.rotationAcceleration = 0;\n        this.maxLife = 0;\n        this.age = 0;\n        this.ease = null;\n        this.extraData = null;\n        this.alphaList = new PropertyList();\n        this.speedList = new PropertyList();\n        this.speedMultiplier = 1;\n        this.acceleration = new Point();\n        this.maxSpeed = NaN;\n        this.scaleList = new PropertyList();\n        this.scaleMultiplier = 1;\n        this.colorList = new PropertyList(true);\n        this._doAlpha = false;\n        this._doScale = false;\n        this._doSpeed = false;\n        this._doAcceleration = false;\n        this._doColor = false;\n        this._doNormalMovement = false;\n        this._oneOverLife = 0;\n        this.next = null;\n        this.prev = null;\n\n        // save often used functions on the instance instead of the prototype for better speed\n        this.init = this.init;\n        this.Particle_init = Particle.prototype.init;\n        this.update = this.update;\n        this.Particle_update = Particle.prototype.update;\n        this.Sprite_destroy = super.destroy;\n        this.Particle_destroy = Particle.prototype.destroy;\n        this.applyArt = this.applyArt;\n        this.kill = this.kill;\n    }\n\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     */\n    public init(): void\n    {\n        // reset the age\n        this.age = 0;\n        // set up the velocity based on the start speed and rotation\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\n        this.velocity.y = 0;\n        ParticleUtils.rotatePoint(this.rotation, this.velocity);\n        if (this.noRotation)\n        {\n            this.rotation = 0;\n        }\n        else\n        {\n            // convert rotation to Radians from Degrees\n            this.rotation *= ParticleUtils.DEG_TO_RADS;\n        }\n        // convert rotation speed to Radians from Degrees\n        this.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\n        this.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\n\n        // set alpha to inital alpha\n        this.alpha = this.alphaList.current.value;\n        // set scale to initial scale\n        this.scale.x = this.scale.y = this.scaleList.current.value;\n        // figure out what we need to interpolate\n        this._doAlpha = !!this.alphaList.current.next;\n        this._doSpeed = !!this.speedList.current.next;\n        this._doScale = !!this.scaleList.current.next;\n        this._doColor = !!this.colorList.current.next;\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n        // _doNormalMovement can be cancelled by subclasses\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n        // save our lerp helper\n        this._oneOverLife = 1 / this.maxLife;\n        // set the inital color\n        const color = this.colorList.current.value;\n\n        this.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\n        // ensure visibility\n        this.visible = true;\n    }\n\n    /**\n     * Sets the texture for the particle. This can be overridden to allow\n     * for an animated particle.\n     * @param art The texture to set.\n     */\n    public applyArt(art: any): void\n    {\n        this.texture = art || Texture.EMPTY;\n    }\n\n    /**\n     * Updates the particle.\n     * @param delta Time elapsed since the previous frame, in __seconds__.\n     * @return The standard interpolation multiplier (0-1) used for all\n     *         relevant particle properties. A value of -1 means the particle\n     *         died of old age instead.\n     */\n    public update(delta: number): number\n    {\n        // increase age\n        this.age += delta;\n        // recycle particle if it is too old\n        if (this.age >= this.maxLife || this.age < 0)\n        {\n            this.kill();\n\n            return -1;\n        }\n\n        // determine our interpolation value\n        let lerp = this.age * this._oneOverLife;// lifetime / maxLife;\n\n        if (this.ease)\n        {\n            if (this.ease.length === 4)\n            {\n                // the t, b, c, d parameters that some tween libraries use\n                // (time, initial value, end value, duration)\n                lerp = (this.ease as any)(lerp, 0, 1, 1);\n            }\n            else\n            {\n                // the simplified version that we like that takes\n                // one parameter, time from 0-1. TweenJS eases provide this usage.\n                lerp = this.ease(lerp);\n            }\n        }\n\n        // interpolate alpha\n        if (this._doAlpha)\n        {\n            this.alpha = this.alphaList.interpolate(lerp);\n        }\n        // interpolate scale\n        if (this._doScale)\n        {\n            const scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n\n            this.scale.x = this.scale.y = scale;\n        }\n        // handle movement\n        if (this._doNormalMovement)\n        {\n            let deltaX: number;\n            let deltaY: number;\n            // interpolate speed\n\n            if (this._doSpeed)\n            {\n                const speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\n                ParticleUtils.normalize(this.velocity);\n                ParticleUtils.scaleBy(this.velocity, speed);\n                deltaX = this.velocity.x * delta;\n                deltaY = this.velocity.y * delta;\n            }\n            else if (this._doAcceleration)\n            {\n                const oldVX = this.velocity.x;\n                const oldVY = this.velocity.y;\n\n                this.velocity.x += this.acceleration.x * delta;\n                this.velocity.y += this.acceleration.y * delta;\n                if (this.maxSpeed)\n                {\n                    const currentSpeed = ParticleUtils.length(this.velocity);\n                    // if we are going faster than we should, clamp at the max speed\n                    // DO NOT recalculate vector length\n\n                    if (currentSpeed > this.maxSpeed)\n                    {\n                        ParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n                    }\n                }\n                // calculate position delta by the midpoint between our old velocity and our new velocity\n                deltaX = (oldVX + this.velocity.x) / 2 * delta;\n                deltaY = (oldVY + this.velocity.y) / 2 * delta;\n            }\n            else\n            {\n                deltaX = this.velocity.x * delta;\n                deltaY = this.velocity.y * delta;\n            }\n            // adjust position based on velocity\n            this.position.x += deltaX;\n            this.position.y += deltaY;\n        }\n        // interpolate color\n        if (this._doColor)\n        {\n            this.tint = this.colorList.interpolate(lerp);\n        }\n        // update rotation\n        if (this.rotationAcceleration !== 0)\n        {\n            const newRotationSpeed = this.rotationSpeed + (this.rotationAcceleration * delta);\n\n            this.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\n            this.rotationSpeed = newRotationSpeed;\n        }\n        else if (this.rotationSpeed !== 0)\n        {\n            this.rotation += this.rotationSpeed * delta;\n        }\n        else if (this.acceleration && !this.noRotation)\n        {\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\n        }\n\n        return lerp;\n    }\n\n    /**\n     * Kills the particle, removing it from the display list\n     * and telling the emitter to recycle it.\n     */\n    public kill(): void\n    {\n        this.emitter.recycle(this);\n    }\n\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     */\n    public destroy(): void\n    {\n        if (this.parent)\n        {\n            this.parent.removeChild(this);\n        }\n        this.Sprite_destroy();\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList\n    = this.speedList = this.ease = this.next = this.prev = null;\n    }\n\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @param art The array of art data. For Particle, it should be an array of\n     *            Textures. Any strings in the array will be converted to\n     *            Textures via Texture.from().\n     * @return The art, after any needed modifications.\n     */\n    public static parseArt(art: any[]): any[]\n    {\n        // convert any strings to Textures.\n        let i;\n\n        for (i = art.length; i >= 0; --i)\n        {\n            if (typeof art[i] === 'string')\n            {\n                art[i] = GetTextureFromString(art[i]);\n            }\n        }\n        // particles from different base textures will be slower in WebGL than if they\n        // were from one spritesheet\n        if (ParticleUtils.verbose)\n        {\n            for (i = art.length - 1; i > 0; --i)\n            {\n                if (art[i].baseTexture !== art[i - 1].baseTexture)\n                {\n                    if (window.console)\n                    {\n                        // eslint-disable-next-line max-len\n                        console.warn('PixiParticles: using particle textures from different images may hinder performance in WebGL');\n                    }\n                    break;\n                }\n            }\n        }\n\n        return art;\n    }\n\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * Particle does nothing to the extra data.\n     * @param extraData The extra data from the particle config.\n     * @return The parsed extra data.\n     */\n    public static parseData(extraData: any): any\n    {\n        return extraData;\n    }\n}\n","import { Point } from 'pixi.js';\n\nexport interface BasicPoint\n{\n    x: number;\n    y: number;\n}\n\nexport interface Segment\n{\n    p1: BasicPoint;\n    p2: BasicPoint;\n    l: number;\n}\n\n/**\n * Chain of line segments for generating spawn positions.\n */\nexport class PolygonalChain\n{\n    /**\n     * List of segment objects in the chain.\n     */\n    private segments: Segment[];\n    /**\n     * Total length of all segments of the chain.\n     */\n    private totalLength: number;\n    /**\n     * Total length of segments up to and including the segment of the same index.\n     * Used for weighted random selection of segment.\n     */\n    private countingLengths: number[];\n\n    /**\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n     */\n    constructor(data: BasicPoint[]|BasicPoint[][])\n    {\n        this.segments = [];\n        this.countingLengths = [];\n        this.totalLength = 0;\n        this.init(data);\n    }\n\n    /**\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n     */\n    private init(data: BasicPoint[]|BasicPoint[][]): void\n    {\n        // if data is not present, set up a segment of length 0\n        if (!data || !data.length)\n        {\n            this.segments.push({ p1: { x: 0, y: 0 }, p2: { x: 0, y: 0 }, l: 0 });\n        }\n        else if (Array.isArray(data[0]))\n        {\n            // list of segment chains, each defined as a list of points\n            for (let i = 0; i < data.length; ++i)\n            {\n                // loop through the chain, connecting points\n                const chain = data[i] as BasicPoint[];\n                let prevPoint = chain[0] as BasicPoint;\n\n                for (let j = 1; j < chain.length; ++j)\n                {\n                    const second = chain[j] as BasicPoint;\n\n                    this.segments.push({ p1: prevPoint, p2: second, l: 0 });\n                    prevPoint = second;\n                }\n            }\n        }\n        else\n        {\n            let prevPoint = data[0] as BasicPoint;\n            // list of points\n\n            for (let i = 1; i < data.length; ++i)\n            {\n                const second = data[i] as BasicPoint;\n\n                this.segments.push({ p1: prevPoint, p2: second, l: 0 });\n                prevPoint = second;\n            }\n        }\n        // now go through our segments to calculate the lengths so that we\n        // can set up a nice weighted random distribution\n        for (let i = 0; i < this.segments.length; ++i)\n        {\n            const { p1, p2 } = this.segments[i];\n            const segLength = Math.sqrt(((p2.x - p1.x) * (p2.x - p1.x)) + ((p2.y - p1.y) * (p2.y - p1.y)));\n            // save length so we can turn a random number into a 0-1 interpolation value later\n\n            this.segments[i].l = segLength;\n            this.totalLength += segLength;\n            // keep track of the length so far, counting up\n            this.countingLengths.push(this.totalLength);\n        }\n    }\n\n    /**\n     * Gets a random point in the chain.\n     * @param out The point to store the selected position in.\n     */\n    public getRandomPoint(out: Point): void\n    {\n        // select a random spot in the length of the chain\n        const rand = Math.random() * this.totalLength;\n        let chosenSeg: Segment;\n        let lerp: number;\n\n        // if only one segment, it wins\n        if (this.segments.length === 1)\n        {\n            chosenSeg = this.segments[0];\n            lerp = rand;\n        }\n        else\n        {\n            // otherwise, go through countingLengths until we have determined\n            // which segment we chose\n            for (let i = 0; i < this.countingLengths.length; ++i)\n            {\n                if (rand < this.countingLengths[i])\n                {\n                    chosenSeg = this.segments[i];\n                    // set lerp equal to the length into that segment\n                    // (i.e. the remainder after subtracting all the segments before it)\n                    lerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\n                    break;\n                }\n            }\n        }\n        // divide lerp by the segment length, to result in a 0-1 number.\n        lerp /= chosenSeg.l || 1;\n        const { p1, p2 } = chosenSeg;\n        // now calculate the position in the segment that the lerp value represents\n\n        out.x = p1.x + (lerp * (p2.x - p1.x));\n        out.y = p1.y + (lerp * (p2.y - p1.y));\n    }\n}\n","import { ParticleUtils, Color, SimpleEase } from './ParticleUtils';\nimport { Particle } from './Particle';\nimport { PropertyNode } from './PropertyNode';\nimport { PolygonalChain } from './PolygonalChain';\nimport { EmitterConfig, OldEmitterConfig } from './EmitterConfig';\nimport { Point, Circle, Rectangle, Container, settings } from 'pixi.js';\n// eslint-disable-next-line no-duplicate-imports\nimport * as pixi from 'pixi.js';\n// get the shared ticker, in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet ticker: pixi.ticker.Ticker;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\n\nif (parseInt((/^(\\d+)\\./).exec(pixi.VERSION)[1], 10) < 5)\n{\n    ticker = pixiNS.ticker.shared;\n}\nelse\n{\n    ticker = (pixiNS as any).Ticker.shared;\n}\n\nexport interface ParticleConstructor\n{\n    new (emitter: Emitter): Particle;\n}\n\n/**\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A particle emitter.\n */\nexport class Emitter\n{\n    /**\n     * The constructor used to create new particles. The default is\n     * the built in particle class.\n     */\n    protected _particleConstructor: typeof Particle;\n    // properties for individual particles\n    /**\n     * An array of PIXI Texture objects.\n     */\n    public particleImages: any[];\n    /**\n     * The first node in the list of alpha values for all particles.\n     */\n    public startAlpha: PropertyNode<number>;\n    /**\n     * The first node in the list of speed values of all particles.\n     */\n    public startSpeed: PropertyNode<number>;\n    /**\n     * A minimum multiplier for the speed of a particle at all stages of its life. A value between\n     * minimumSpeedMultiplier and 1 is randomly generated for each particle.\n     */\n    public minimumSpeedMultiplier: number;\n    /**\n     * Acceleration to apply to particles. Using this disables\n     * any interpolation of particle speed. If the particles do\n     * not have a rotation speed, then they will be rotated to\n     * match the direction of travel.\n     */\n    public acceleration: Point;\n    /**\n     * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n     * will disable the maximum speed.\n     */\n    public maxSpeed: number;\n    /**\n     * The first node in the list of scale values of all particles.\n     */\n    public startScale: PropertyNode<number>;\n    /**\n     * A minimum multiplier for the scale of a particle at all stages of its life. A value between\n     * minimumScaleMultiplier and 1 is randomly generated for each particle.\n     */\n    public minimumScaleMultiplier: number;\n    /**\n     * The first node in the list of  color values of all particles, as red, green, and blue\n     * uints from 0-255.\n     */\n    public startColor: PropertyNode<Color>;\n    /**\n     * The minimum lifetime for a particle, in seconds.\n     */\n    public minLifetime: number;\n    /**\n     * The maximum lifetime for a particle, in seconds.\n     */\n    public maxLifetime: number;\n    /**\n     * The minimum start rotation for a particle, in degrees. This value\n     * is ignored if the spawn type is \"burst\" or \"arc\".\n     */\n    public minStartRotation: number;\n    /**\n     * The maximum start rotation for a particle, in degrees. This value\n     * is ignored if the spawn type is \"burst\" or \"arc\".\n     */\n    public maxStartRotation: number;\n    /**\n     * If no particle rotation should occur. Starting rotation will still\n     * affect the direction in which particles move. If the rotation speed\n     * is set, then this will be ignored.\n     */\n    public noRotation: boolean;\n    /**\n     * The minimum rotation speed for a particle, in degrees per second.\n     * This only visually spins the particle, it does not change direction\n     * of movement.\n     */\n    public minRotationSpeed: number;\n    /**\n     * The maximum rotation speed for a particle, in degrees per second.\n     * This only visually spins the particle, it does not change direction\n     * of movement.\n     */\n    public maxRotationSpeed: number;\n    /**\n    * The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\n    */\n    public rotationAcceleration: number;\n    /**\n     * The blend mode for all particles, as named by PIXI.blendModes.\n     */\n    public particleBlendMode: number;\n    /**\n     * An easing function for nonlinear interpolation of values. Accepts a single\n     * parameter of time as a value from 0-1, inclusive. Expected outputs are values\n     * from 0-1, inclusive.\n     */\n    public customEase: SimpleEase;\n    /**\n     *\tExtra data for use in custom particles. The emitter doesn't look inside, but\n     *\tpasses it on to the particle to use in init().\n     */\n    public extraData: any;\n    // properties for spawning particles\n    /**\n     * Time between particle spawns in seconds.\n     */\n    protected _frequency: number;\n    /**\n     * Chance that a particle will be spawned on each opportunity to spawn one.\n     * 0 is 0%, 1 is 100%.\n     */\n    public spawnChance: number;\n    /**\n     * Maximum number of particles to keep alive at a time. If this limit\n     * is reached, no more particles will spawn until some have died.\n     */\n    public maxParticles: number;\n    /**\n     * The amount of time in seconds to emit for before setting emit to false.\n     * A value of -1 is an unlimited amount of time.\n     */\n    public emitterLifetime: number;\n    /**\n     * Position at which to spawn particles, relative to the emitter's owner's origin.\n     * For example, the flames of a rocket travelling right might have a spawnPos\n     * of {x:-50, y:0}.\n     * to spawn at the rear of the rocket.\n     * To change this, use updateSpawnPos().\n     */\n    public spawnPos: Point;\n    /**\n     * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\n     * \"circle\", \"burst\", \"ring\".\n     */\n    public spawnType: string;\n    /**\n     * A reference to the emitter function specific to the spawn type.\n     */\n    protected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\n    /**\n     * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\n     */\n    public spawnRect: Rectangle;\n    /**\n     * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\n     */\n    public spawnPolygonalChain: PolygonalChain;\n    /**\n     * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\n     */\n    public spawnCircle: Circle & {minRadius: number};\n    /**\n     * Number of particles to spawn time that the frequency allows for particles to spawn.\n     */\n    public particlesPerWave: number;\n    /**\n     * Spacing between particles in a burst. 0 gives a random angle for each particle.\n     */\n    public particleSpacing: number;\n    /**\n     * Angle at which to start spawning particles in a burst.\n     */\n    public angleStart: number;\n    /**\n     * Rotation of the emitter or emitter's owner in degrees. This is added to\n     * the calculated spawn angle.\n     * To change this, use rotate().\n     */\n    protected rotation: number;\n    /**\n     * The world position of the emitter's owner, to add spawnPos to when\n     * spawning particles. To change this, use updateOwnerPos().\n     */\n    protected ownerPos: Point;\n    /**\n     * The origin + spawnPos in the previous update, so that the spawn position\n     * can be interpolated to space out particles better.\n     */\n    protected _prevEmitterPos: Point;\n    /**\n     * If _prevEmitterPos is valid, to prevent interpolation on the first update\n     */\n    protected _prevPosIsValid: boolean;\n    /**\n     * If either ownerPos or spawnPos has changed since the previous update.\n     */\n    protected _posChanged: boolean;\n    /**\n     * The container to add particles to.\n     */\n    protected _parent: Container;\n    /**\n     * If particles should be added at the back of the display list instead of the front.\n     */\n    public addAtBack: boolean;\n    /**\n     * The current number of active particles.\n     */\n    public particleCount: number;\n    /**\n     * If particles should be emitted during update() calls. Setting this to false\n     * stops new particles from being created, but allows existing ones to die out.\n     */\n    protected _emit: boolean;\n    /**\n     * The timer for when to spawn particles in seconds, where numbers less\n     * than 0 mean that particles should be spawned.\n     */\n    protected _spawnTimer: number;\n    /**\n     * The life of the emitter in seconds.\n     */\n    protected _emitterLife: number;\n    /**\n     * The particles that are active and on the display list. This is the first particle in a\n     * linked list.\n     */\n    protected _activeParticlesFirst: Particle;\n    /**\n     * The particles that are active and on the display list. This is the last particle in a\n     * linked list.\n     */\n    protected _activeParticlesLast: Particle;\n    /**\n     * The particles that are not currently being used. This is the first particle in a\n     * linked list.\n     */\n    protected _poolFirst: Particle;\n    /**\n     * The original config object that this emitter was initialized with.\n     */\n    protected _origConfig: any;\n    /**\n     * The original particle image data that this emitter was initialized with.\n     */\n    protected _origArt: any;\n    /**\n     * If the update function is called automatically from the shared ticker.\n     * Setting this to false requires calling the update function manually.\n     */\n    protected _autoUpdate: boolean;\n    /**\n     * A number keeping index of currently applied image. Used to emit arts in order.\n     */\n    protected _currentImageIndex = -1;\n    /**\n     * If the emitter should destroy itself when all particles have died out. This is set by\n     * playOnceAndDestroy();\n     */\n    protected _destroyWhenComplete: boolean;\n    /**\n     * A callback for when all particles have died out. This is set by\n     * playOnceAndDestroy() or playOnce();\n     */\n    protected _completeCallback: () => void;\n\n    /**\n     * @param particleParent The container to add the particles to.\n     * @param particleImages A texture or array of textures to use\n     *                       for the particles. Strings will be turned\n     *                       into textures via Texture.fromImage().\n     * @param config A configuration object containing settings for the emitter.\n     * @param config.emit If config.emit is explicitly passed as false, the\n     *                    Emitter will start disabled.\n     * @param config.autoUpdate If config.autoUpdate is explicitly passed as\n     *                          true, the Emitter will automatically call\n     *                          update via the PIXI shared ticker.\n     */\n    constructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\n    {\n        this._particleConstructor = Particle;\n        // properties for individual particles\n        this.particleImages = null;\n        this.startAlpha = null;\n        this.startSpeed = null;\n        this.minimumSpeedMultiplier = 1;\n        this.acceleration = null;\n        this.maxSpeed = NaN;\n        this.startScale = null;\n        this.minimumScaleMultiplier = 1;\n        this.startColor = null;\n        this.minLifetime = 0;\n        this.maxLifetime = 0;\n        this.minStartRotation = 0;\n        this.maxStartRotation = 0;\n        this.noRotation = false;\n        this.minRotationSpeed = 0;\n        this.maxRotationSpeed = 0;\n        this.particleBlendMode = 0;\n        this.customEase = null;\n        this.extraData = null;\n        // properties for spawning particles\n        this._frequency = 1;\n        this.spawnChance = 1;\n        this.maxParticles = 1000;\n        this.emitterLifetime = -1;\n        this.spawnPos = null;\n        this.spawnType = null;\n        this._spawnFunc = null;\n        this.spawnRect = null;\n        this.spawnCircle = null;\n        this.spawnPolygonalChain = null;\n        this.particlesPerWave = 1;\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        // emitter properties\n        this.rotation = 0;\n        this.ownerPos = null;\n        this._prevEmitterPos = null;\n        this._prevPosIsValid = false;\n        this._posChanged = false;\n        this._parent = null;\n        this.addAtBack = false;\n        this.particleCount = 0;\n        this._emit = false;\n        this._spawnTimer = 0;\n        this._emitterLife = -1;\n        this._activeParticlesFirst = null;\n        this._activeParticlesLast = null;\n        this._poolFirst = null;\n        this._origConfig = null;\n        this._origArt = null;\n        this._autoUpdate = false;\n        this._currentImageIndex = -1;\n        this._destroyWhenComplete = false;\n        this._completeCallback = null;\n\n        // set the initial parent\n        this.parent = particleParent;\n\n        if (particleImages && config)\n        {\n            this.init(particleImages, config);\n        }\n\n        // save often used functions on the instance instead of the prototype for better speed\n        this.recycle = this.recycle;\n        this.update = this.update;\n        this.rotate = this.rotate;\n        this.updateSpawnPos = this.updateSpawnPos;\n        this.updateOwnerPos = this.updateOwnerPos;\n    }\n\n    /**\n     * If the emitter is using particle art in order as provided in `particleImages`.\n     * Effective only when `particleImages` has multiple art options.\n     * This is particularly useful ensuring that each art shows up once, in case you need to emit a body in an order.\n     * For example: dragon - [Head, body1, body2, ..., tail]\n     */\n    public get orderedArt(): boolean { return this._currentImageIndex !== -1; }\n    public set orderedArt(value)\n    {\n        this._currentImageIndex = value ? 0 : -1;\n    }\n\n    /**\n     * Time between particle spawns in seconds. If this value is not a number greater than 0,\n     * it will be set to 1 (particle per second) to prevent infinite loops.\n     */\n    public get frequency(): number { return this._frequency; }\n    public set frequency(value)\n    {\n        // do some error checking to prevent infinite loops\n        if (typeof value === 'number' && value > 0)\n        {\n            this._frequency = value;\n        }\n        else\n        {\n            this._frequency = 1;\n        }\n    }\n    /**\n     * The constructor used to create new particles. The default is\n     * the built in Particle class. Setting this will dump any active or\n     * pooled particles, if the emitter has already been used.\n     */\n    public get particleConstructor(): typeof Particle { return this._particleConstructor; }\n    public set particleConstructor(value)\n    {\n        if (value !== this._particleConstructor)\n        {\n            this._particleConstructor = value;\n            // clean up existing particles\n            this.cleanup();\n            // scrap all the particles\n            for (let particle = this._poolFirst; particle; particle = particle.next)\n            {\n                particle.destroy();\n            }\n            this._poolFirst = null;\n            // re-initialize the emitter so that the new constructor can do anything it needs to\n            if (this._origConfig && this._origArt)\n            {\n                this.init(this._origArt, this._origConfig);\n            }\n        }\n    }\n\n    /**\n    * The container to add particles to. Settings this will dump any active particles.\n    */\n    public get parent(): Container { return this._parent; }\n    public set parent(value)\n    {\n        this.cleanup();\n        this._parent = value;\n    }\n\n    /**\n     * Sets up the emitter based on the config settings.\n     * @param art A texture or array of textures to use for the particles.\n     * @param config A configuration object containing settings for the emitter.\n     */\n    public init(art: any, config: EmitterConfig|OldEmitterConfig): void\n    {\n        if (!art || !config)\n        {\n            return;\n        }\n        // clean up any existing particles\n        this.cleanup();\n\n        // store the original config and particle images, in case we need to re-initialize\n        // when the particle constructor is changed\n        this._origConfig = config;\n        this._origArt = art;\n\n        // set up the array of data, also ensuring that it is an array\n        art = Array.isArray(art) ? art.slice() : [art];\n        // run the art through the particle class's parsing function\n        const partClass = this._particleConstructor;\n\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n        // /////////////////////////\n        // Particle Properties   //\n        // /////////////////////////\n        // set up the alpha\n        if (config.alpha)\n        {\n            this.startAlpha = PropertyNode.createList(config.alpha);\n        }\n        else\n        {\n            this.startAlpha = new PropertyNode(1, 0);\n        }\n        // set up the speed\n        if (config.speed)\n        {\n            this.startSpeed = PropertyNode.createList(config.speed);\n            // eslint-disable-next-line max-len\n            this.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\n        }\n        else\n        {\n            this.minimumSpeedMultiplier = 1;\n            this.startSpeed = new PropertyNode(0, 0);\n        }\n        // set up acceleration\n        const acceleration = config.acceleration;\n\n        if (acceleration && (acceleration.x || acceleration.y))\n        {\n            // make sure we disable speed interpolation\n            this.startSpeed.next = null;\n            this.acceleration = new Point(acceleration.x, acceleration.y);\n            this.maxSpeed = config.maxSpeed || NaN;\n        }\n        else\n        {\n            this.acceleration = new Point();\n        }\n        // set up the scale\n        if (config.scale)\n        {\n            this.startScale = PropertyNode.createList(config.scale);\n            // eslint-disable-next-line max-len\n            this.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\n        }\n        else\n        {\n            this.startScale = new PropertyNode(1, 0);\n            this.minimumScaleMultiplier = 1;\n        }\n        // set up the color\n        if (config.color)\n        {\n            this.startColor = PropertyNode.createList(config.color);\n        }\n        else\n        {\n            this.startColor = new PropertyNode({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\n        }\n        // set up the start rotation\n        if (config.startRotation)\n        {\n            this.minStartRotation = config.startRotation.min;\n            this.maxStartRotation = config.startRotation.max;\n        }\n        else\n        {\n            this.minStartRotation = this.maxStartRotation = 0;\n        }\n        if (config.noRotation\n    && (this.minStartRotation || this.maxStartRotation))\n        {\n            this.noRotation = !!config.noRotation;\n        }\n        else\n        {\n            this.noRotation = false;\n        }\n        // set up the rotation speed\n        if (config.rotationSpeed)\n        {\n            this.minRotationSpeed = config.rotationSpeed.min;\n            this.maxRotationSpeed = config.rotationSpeed.max;\n        }\n        else\n        {\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\n        }\n\n        this.rotationAcceleration = config.rotationAcceleration || 0;\n        // set up the lifetime\n        this.minLifetime = config.lifetime.min;\n        this.maxLifetime = config.lifetime.max;\n        // get the blend mode\n        this.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\n        // use the custom ease if provided\n        if (config.ease)\n        {\n            this.customEase = typeof config.ease === 'function'\n                ? config.ease : ParticleUtils.generateEase(config.ease);\n        }\n        else\n        {\n            this.customEase = null;\n        }\n        // set up the extra data, running it through the particle class's parseData function.\n        if (partClass.parseData)\n        {\n            this.extraData = partClass.parseData(config.extraData);\n        }\n        else\n        {\n            this.extraData = config.extraData || null;\n        }\n        // ////////////////////////\n        // Emitter Properties   //\n        // ////////////////////////\n        // reset spawn type specific settings\n        this.spawnRect = this.spawnCircle = null;\n        this.particlesPerWave = 1;\n        if (config.particlesPerWave && config.particlesPerWave > 1)\n        {\n            this.particlesPerWave = config.particlesPerWave;\n        }\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        // determine the spawn function to use\n        this.parseSpawnType(config);\n        // set the spawning frequency\n        this.frequency = config.frequency;\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n        // set the emitter lifetime\n        this.emitterLifetime = config.emitterLifetime || -1;\n        // set the max particles\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n        // determine if we should add the particle at the back of the list or not\n        this.addAtBack = !!config.addAtBack;\n        // reset the emitter position and rotation variables\n        this.rotation = 0;\n        this.ownerPos = new Point();\n        this.spawnPos = new Point(config.pos.x, config.pos.y);\n\n        this.initAdditional(art, config);\n\n        this._prevEmitterPos = this.spawnPos.clone();\n        // previous emitter position is invalid and should not be used for interpolation\n        this._prevPosIsValid = false;\n        // start emitting\n        this._spawnTimer = 0;\n        this.emit = config.emit === undefined ? true : !!config.emit;\n        this.autoUpdate = !!config.autoUpdate;\n        this.orderedArt = !!config.orderedArt;\n    }\n\n    /**\n     * Sets up additional parameters to the emitter from config settings.\n     * Using for parsing additional parameters on classes that extend from Emitter\n     * @param art A texture or array of textures to use for the particles.\n     * @param config A configuration object containing settings for the emitter.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig): void\n    {\n        // override in subclasses\n    }\n\n    /**\n     * Parsing emitter spawn type from config settings.\n     * Place for override and add new kind of spawn type\n     * @param config A configuration object containing settings for the emitter.\n     */\n    protected parseSpawnType(config: EmitterConfig|OldEmitterConfig): void\n    {\n        let spawnCircle;\n\n        switch (config.spawnType)\n        {\n            case 'rect':\n                this.spawnType = 'rect';\n                this._spawnFunc = this._spawnRect;\n                const spawnRect = config.spawnRect;\n\n                this.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n                break;\n            case 'circle':\n                this.spawnType = 'circle';\n                this._spawnFunc = this._spawnCircle;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n                break;\n            case 'ring':\n                this.spawnType = 'ring';\n                this._spawnFunc = this._spawnRing;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n                this.spawnCircle.minRadius = spawnCircle.minR;\n                break;\n            case 'burst':\n                this.spawnType = 'burst';\n                this._spawnFunc = this._spawnBurst;\n                this.particleSpacing = config.particleSpacing;\n                this.angleStart = config.angleStart ? config.angleStart : 0;\n                break;\n            case 'point':\n                this.spawnType = 'point';\n                this._spawnFunc = this._spawnPoint;\n                break;\n            case 'polygonalChain':\n                this.spawnType = 'polygonalChain';\n                this._spawnFunc = this._spawnPolygonalChain;\n                this.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\n                break;\n            default:\n                this.spawnType = 'point';\n                this._spawnFunc = this._spawnPoint;\n                break;\n        }\n    }\n\n    /**\n     * Recycles an individual particle. For internal use only.\n     * @param particle The particle to recycle.\n     * @internal\n     */\n    public recycle(particle: Particle): void\n    {\n        if (particle.next)\n        {\n            particle.next.prev = particle.prev;\n        }\n        if (particle.prev)\n        {\n            particle.prev.next = particle.next;\n        }\n        if (particle === this._activeParticlesLast)\n        {\n            this._activeParticlesLast = particle.prev;\n        }\n        if (particle === this._activeParticlesFirst)\n        {\n            this._activeParticlesFirst = particle.next;\n        }\n        // add to pool\n        particle.prev = null;\n        particle.next = this._poolFirst;\n        this._poolFirst = particle;\n        // remove child from display, or make it invisible if it is in a ParticleContainer\n        if (particle.parent)\n        {\n            particle.parent.removeChild(particle);\n        }\n        // decrease count\n        --this.particleCount;\n    }\n\n    /**\n     * Sets the rotation of the emitter to a new value.\n     * @param newRot The new rotation, in degrees.\n     */\n    public rotate(newRot: number): void\n    {\n        if (this.rotation === newRot) return;\n        // caclulate the difference in rotation for rotating spawnPos\n        const diff = newRot - this.rotation;\n\n        this.rotation = newRot;\n        // rotate spawnPos\n        ParticleUtils.rotatePoint(diff, this.spawnPos);\n        // mark the position as having changed\n        this._posChanged = true;\n    }\n\n    /**\n     * Changes the spawn position of the emitter.\n     * @param x The new x value of the spawn position for the emitter.\n     * @param y The new y value of the spawn position for the emitter.\n     */\n    public updateSpawnPos(x: number, y: number): void\n    {\n        this._posChanged = true;\n        this.spawnPos.x = x;\n        this.spawnPos.y = y;\n    }\n\n    /**\n     * Changes the position of the emitter's owner. You should call this if you are adding\n     * particles to the world container that your emitter's owner is moving around in.\n     * @param x The new x value of the emitter's owner.\n     * @param y The new y value of the emitter's owner.\n     */\n    public updateOwnerPos(x: number, y: number): void\n    {\n        this._posChanged = true;\n        this.ownerPos.x = x;\n        this.ownerPos.y = y;\n    }\n\n    /**\n     * Prevents emitter position interpolation in the next update.\n     * This should be used if you made a major position change of your emitter's owner\n     * that was not normal movement.\n     */\n    public resetPositionTracking(): void\n    {\n        this._prevPosIsValid = false;\n    }\n\n    /**\n     * If particles should be emitted during update() calls. Setting this to false\n     * stops new particles from being created, but allows existing ones to die out.\n     */\n    public get emit(): boolean { return this._emit; }\n    public set emit(value)\n    {\n        this._emit = !!value;\n        this._emitterLife = this.emitterLifetime;\n    }\n\n    /**\n     * If the update function is called automatically from the shared ticker.\n     * Setting this to false requires calling the update function manually.\n     */\n    public get autoUpdate(): boolean { return this._autoUpdate; }\n    public set autoUpdate(value)\n    {\n        if (this._autoUpdate && !value)\n        {\n            ticker.remove(this.update, this);\n        }\n        else if (!this._autoUpdate && value)\n        {\n            ticker.add(this.update, this);\n        }\n        this._autoUpdate = !!value;\n    }\n\n    /**\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n     * when particle emission is complete.\n     * @param callback Callback for when emission is complete (all particles have died off)\n     */\n    public playOnceAndDestroy(callback?: () => void): void\n    {\n        this.autoUpdate = true;\n        this.emit = true;\n        this._destroyWhenComplete = true;\n        this._completeCallback = callback;\n    }\n\n    /**\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\n     * @param callback Callback for when emission is complete (all particles have died off)\n     */\n    public playOnce(callback?: () => void): void\n    {\n        this.emit = true;\n        this._completeCallback = callback;\n    }\n\n    /**\n     * Updates all particles spawned by this emitter and emits new ones.\n     * @param delta Time elapsed since the previous frame, in __seconds__.\n     */\n    public update(delta: number): void\n    {\n        if (this._autoUpdate)\n        {\n            delta = delta / settings.TARGET_FPMS / 1000;\n        }\n\n        // if we don't have a parent to add particles to, then don't do anything.\n        // this also works as a isDestroyed check\n        if (!this._parent) return;\n        // update existing particles\n        let i;\n        let particle;\n        let next;\n\n        for (particle = this._activeParticlesFirst; particle; particle = next)\n        {\n            next = particle.next;\n            particle.update(delta);\n        }\n        let prevX;\n        let prevY;\n        // if the previous position is valid, store these for later interpolation\n\n        if (this._prevPosIsValid)\n        {\n            prevX = this._prevEmitterPos.x;\n            prevY = this._prevEmitterPos.y;\n        }\n        // store current position of the emitter as local variables\n        const curX = this.ownerPos.x + this.spawnPos.x;\n        const curY = this.ownerPos.y + this.spawnPos.y;\n        // spawn new particles\n\n        if (this._emit)\n        {\n            // decrease spawn timer\n            this._spawnTimer -= delta < 0 ? 0 : delta;\n            // while _spawnTimer < 0, we have particles to spawn\n            while (this._spawnTimer <= 0)\n            {\n                // determine if the emitter should stop spawning\n                if (this._emitterLife >= 0)\n                {\n                    this._emitterLife -= this._frequency;\n                    if (this._emitterLife <= 0)\n                    {\n                        this._spawnTimer = 0;\n                        this._emitterLife = 0;\n                        this.emit = false;\n                        break;\n                    }\n                }\n                // determine if we have hit the particle limit\n                if (this.particleCount >= this.maxParticles)\n                {\n                    this._spawnTimer += this._frequency;\n                    continue;\n                }\n                // determine the particle lifetime\n                let lifetime;\n\n                if (this.minLifetime === this.maxLifetime)\n                {\n                    lifetime = this.minLifetime;\n                }\n                else\n                {\n                    lifetime = (Math.random() * (this.maxLifetime - this.minLifetime)) + this.minLifetime;\n                }\n                // only make the particle if it wouldn't immediately destroy itself\n                if (-this._spawnTimer < lifetime)\n                {\n                    // If the position has changed and this isn't the first spawn,\n                    // interpolate the spawn position\n                    let emitPosX; let\n                        emitPosY;\n\n                    if (this._prevPosIsValid && this._posChanged)\n                    {\n                        // 1 - _spawnTimer / delta, but _spawnTimer is negative\n                        const lerp = 1 + (this._spawnTimer / delta);\n\n                        emitPosX = ((curX - prevX) * lerp) + prevX;\n                        emitPosY = ((curY - prevY) * lerp) + prevY;\n                    }\n                    else// otherwise just set to the spawn position\n                    {\n                        emitPosX = curX;\n                        emitPosY = curY;\n                    }\n                    // create enough particles to fill the wave (non-burst types have a wave of 1)\n                    i = 0;\n                    for (let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\n                    {\n                        // see if we actually spawn one\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n                        {\n                            continue;\n                        }\n                        // create particle\n                        let p;\n\n                        if (this._poolFirst)\n                        {\n                            p = this._poolFirst;\n                            this._poolFirst = this._poolFirst.next;\n                            p.next = null;\n                        }\n                        else\n                        {\n                            p = new this.particleConstructor(this);\n                        }\n\n                        // set a random texture if we have more than one\n                        if (this.particleImages.length > 1)\n                        {\n                            // if using ordered art\n                            if (this._currentImageIndex !== -1)\n                            {\n                                // get current art index, then increment for the next particle\n                                p.applyArt(this.particleImages[this._currentImageIndex++]);\n                                // loop around if needed\n                                if (this._currentImageIndex < 0 || this._currentImageIndex >= this.particleImages.length)\n                                {\n                                    this._currentImageIndex = 0;\n                                }\n                            }\n                            // otherwise grab a random one\n                            else\n                            {\n                                p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n                            }\n                        }\n                        else\n                        {\n                            // if they are actually the same texture, a standard particle\n                            // will quit early from the texture setting in setTexture().\n                            p.applyArt(this.particleImages[0]);\n                        }\n                        // set up the start and end values\n                        p.alphaList.reset(this.startAlpha);\n                        if (this.minimumSpeedMultiplier !== 1)\n                        {\n                            // eslint-disable-next-line max-len\n                            p.speedMultiplier = (Math.random() * (1 - this.minimumSpeedMultiplier)) + this.minimumSpeedMultiplier;\n                        }\n                        p.speedList.reset(this.startSpeed);\n                        p.acceleration.x = this.acceleration.x;\n                        p.acceleration.y = this.acceleration.y;\n                        p.maxSpeed = this.maxSpeed;\n                        if (this.minimumScaleMultiplier !== 1)\n                        {\n                            // eslint-disable-next-line max-len\n                            p.scaleMultiplier = (Math.random() * (1 - this.minimumScaleMultiplier)) + this.minimumScaleMultiplier;\n                        }\n                        p.scaleList.reset(this.startScale);\n                        p.colorList.reset(this.startColor);\n                        // randomize the rotation speed\n                        if (this.minRotationSpeed === this.maxRotationSpeed)\n                        {\n                            p.rotationSpeed = this.minRotationSpeed;\n                        }\n                        else\n                        {\n                            // eslint-disable-next-line max-len\n                            p.rotationSpeed = (Math.random() * (this.maxRotationSpeed - this.minRotationSpeed)) + this.minRotationSpeed;\n                        }\n                        p.rotationAcceleration = this.rotationAcceleration;\n                        p.noRotation = this.noRotation;\n                        // set up the lifetime\n                        p.maxLife = lifetime;\n                        // set the blend mode\n                        p.blendMode = this.particleBlendMode;\n                        // set the custom ease, if any\n                        p.ease = this.customEase;\n                        // set the extra data, if any\n                        p.extraData = this.extraData;\n                        // set additional properties to particle\n                        this.applyAdditionalProperties(p);\n                        // call the proper function to handle rotation and position of particle\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\n                        // initialize particle\n                        p.init();\n                        // add the particle to the display list\n                        if (!p.parent)\n                        {\n                            if (this.addAtBack)\n                            {\n                                this._parent.addChildAt(p, 0);\n                            }\n                            else\n                            {\n                                this._parent.addChild(p);\n                            }\n                        }\n                        else\n                        {\n                            // kind of hacky, but performance friendly\n                            // shuffle children to correct place\n                            const children = this._parent.children;\n                            // avoid using splice if possible\n\n                            if (children[0] === p)\n                            {\n                                children.shift();\n                            }\n                            else if (children[children.length - 1] === p)\n                            {\n                                children.pop();\n                            }\n                            else\n                            {\n                                const index = children.indexOf(p);\n\n                                children.splice(index, 1);\n                            }\n                            if (this.addAtBack)\n                            {\n                                children.unshift(p);\n                            }\n                            else\n                            {\n                                children.push(p);\n                            }\n                        }\n                        // add particle to list of active particles\n                        if (this._activeParticlesLast)\n                        {\n                            this._activeParticlesLast.next = p;\n                            p.prev = this._activeParticlesLast;\n                            this._activeParticlesLast = p;\n                        }\n                        else\n                        {\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\n                        }\n                        ++this.particleCount;\n                        // update the particle by the time passed, so the particles are spread out properly\n                        p.update(-this._spawnTimer);// we want a positive delta, because a negative delta messes things up\n                    }\n                }\n                // increase timer and continue on to any other particles that need to be created\n                this._spawnTimer += this._frequency;\n            }\n        }\n        // if the position changed before this update, then keep track of that\n        if (this._posChanged)\n        {\n            this._prevEmitterPos.x = curX;\n            this._prevEmitterPos.y = curY;\n            this._prevPosIsValid = true;\n            this._posChanged = false;\n        }\n\n        // if we are all done and should destroy ourselves, take care of that\n        if (!this._emit && !this._activeParticlesFirst)\n        {\n            if (this._completeCallback)\n            {\n                const cb = this._completeCallback;\n\n                this._completeCallback = null;\n                cb();\n            }\n            if (this._destroyWhenComplete)\n            {\n                this.destroy();\n            }\n        }\n    }\n\n    /**\n     * Set additional properties to new particle.\n     * Using on classes that extend from Emitter\n     * @param p The particle\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected applyAdditionalProperties(p: Particle): void\n    {\n        // for override in subclass\n    }\n\n    /**\n     * Positions a particle for a point type emitter.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave. Not used for this function.\n     */\n    protected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number): void\n    {\n        // set the initial rotation/direction of the particle based on\n        // starting particle angle and rotation of emitter\n        if (this.minStartRotation === this.maxStartRotation)\n        {\n            p.rotation = this.minStartRotation + this.rotation;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\n        }\n        // drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    }\n\n    /**\n     * Positions a particle for a rectangle type emitter.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave. Not used for this function.\n     */\n    protected _spawnRect(p: Particle, emitPosX: number, emitPosY: number): void\n    {\n        // set the initial rotation/direction of the particle based on starting\n        // particle angle and rotation of emitter\n        if (this.minStartRotation === this.maxStartRotation)\n        {\n            p.rotation = this.minStartRotation + this.rotation;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\n        }\n        // place the particle at a random point in the rectangle\n        helperPoint.x = (Math.random() * this.spawnRect.width) + this.spawnRect.x;\n        helperPoint.y = (Math.random() * this.spawnRect.height) + this.spawnRect.y;\n        if (this.rotation !== 0)\n        {\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\n        }\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    }\n\n    /**\n     * Positions a particle for a circle type emitter.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave. Not used for this function.\n     */\n    protected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number): void\n    {\n        // set the initial rotation/direction of the particle based on starting\n        // particle angle and rotation of emitter\n        if (this.minStartRotation === this.maxStartRotation)\n        {\n            p.rotation = this.minStartRotation + this.rotation;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation)) + this.minStartRotation + this.rotation;\n        }\n        // place the particle at a random radius in the circle\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\n        helperPoint.y = 0;\n        // rotate the point to a random angle in the circle\n        ParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\n        // offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        // rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n        {\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\n        }\n        // set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    }\n\n    /**\n     * Positions a particle for a ring type emitter.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave. Not used for this function.\n     */\n    protected _spawnRing(p: Particle, emitPosX: number, emitPosY: number): void\n    {\n        const spawnCircle = this.spawnCircle;\n        // set the initial rotation/direction of the particle based on starting\n        // particle angle and rotation of emitter\n\n        if (this.minStartRotation === this.maxStartRotation)\n        {\n            p.rotation = this.minStartRotation + this.rotation;\n        }\n        else\n        {\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation))\n    + this.minStartRotation + this.rotation;\n        }\n        // place the particle at a random radius in the ring\n        if (spawnCircle.minRadius !== spawnCircle.radius)\n        {\n            helperPoint.x = (Math.random() * (spawnCircle.radius - spawnCircle.minRadius))\n    + spawnCircle.minRadius;\n        }\n        else\n        {\n            helperPoint.x = spawnCircle.radius;\n        }\n        helperPoint.y = 0;\n        // rotate the point to a random angle in the circle\n        const angle = Math.random() * 360;\n\n        p.rotation += angle;\n        ParticleUtils.rotatePoint(angle, helperPoint);\n        // offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        // rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n        {\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\n        }\n        // set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    }\n\n    /**\n     * Positions a particle for polygonal chain.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave. Not used for this function.\n     */\n    protected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number): void\n    {\n        // set the initial rotation/direction of the particle based on starting\n        // particle angle and rotation of emitter\n        if (this.minStartRotation === this.maxStartRotation)\n        {\n            p.rotation = this.minStartRotation + this.rotation;\n        }\n        else\n        {\n            p.rotation = (Math.random() * (this.maxStartRotation - this.minStartRotation))\n    + this.minStartRotation + this.rotation;\n        }\n        // get random point on the polygon chain\n        this.spawnPolygonalChain.getRandomPoint(helperPoint);\n        // rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n        {\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\n        }\n        // set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    }\n\n    /**\n     * Positions a particle for a burst type emitter.\n     * @param p The particle to position and rotate.\n     * @param emitPosX The emitter's x position\n     * @param emitPosY The emitter's y position\n     * @param i The particle number in the current wave.\n     */\n    protected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number): void\n    {\n        // set the initial rotation/direction of the particle based on spawn\n        // angle and rotation of emitter\n        if (this.particleSpacing === 0)\n        {\n            p.rotation = Math.random() * 360;\n        }\n        else\n        {\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n        }\n        // drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    }\n\n    /**\n     * Kills all active particles immediately.\n     */\n    public cleanup(): void\n    {\n        let particle;\n        let next;\n\n        for (particle = this._activeParticlesFirst; particle; particle = next)\n        {\n            next = particle.next;\n            this.recycle(particle);\n            if (particle.parent)\n            {\n                particle.parent.removeChild(particle);\n            }\n        }\n        this._activeParticlesFirst = this._activeParticlesLast = null;\n        this.particleCount = 0;\n    }\n\n    /**\n     * Destroys the emitter and all of its particles.\n     */\n    public destroy(): void\n    {\n        // make sure we aren't still listening to any tickers\n        this.autoUpdate = false;\n        // puts all active particles in the pool, and removes them from the particle parent\n        this.cleanup();\n        // wipe the pool clean\n        let next;\n\n        for (let particle = this._poolFirst; particle; particle = next)\n        {\n            // store next value so we don't lose it in our destroy call\n            next = particle.next;\n            particle.destroy();\n        }\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos\n            = this.startColor = this.startScale = this.startAlpha = this.startSpeed\n            = this.customEase = this._completeCallback = null;\n    }\n}\n","import { ParticleUtils } from './ParticleUtils';\nimport { Particle } from './Particle';\nimport { Emitter } from './Emitter';\nimport { Point, Texture } from 'pixi.js';\n\n/**\n * A helper point for math things.\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A hand picked list of Math functions (and a couple properties) that are\n * allowable. They should be used without the preceding \"Math.\"\n * @hidden\n */\nconst MATH_FUNCS = [\n    'pow',\n    'sqrt',\n    'abs',\n    'floor',\n    'round',\n    'ceil',\n    'E',\n    'PI',\n    'sin',\n    'cos',\n    'tan',\n    'asin',\n    'acos',\n    'atan',\n    'atan2',\n    'log',\n];\n/**\n * create an actual regular expression object from the string\n * @hidden\n */\nconst WHITELISTER = new RegExp(\n    [\n        // Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n        // as 'x', for the variable usage.\n        '[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]',\n    ].concat(MATH_FUNCS).join('|'),\n    'g',\n);\n\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @hidden\n * @param pathString The string to parse.\n * @return The path function - takes x, outputs y.\n */\nfunction parsePath(pathString: string): (x: number) => number\n{\n    const matches = pathString.match(WHITELISTER);\n\n    for (let i = matches.length - 1; i >= 0; --i)\n    {\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\n        { matches[i] = `Math.${matches[i]}`; }\n    }\n    pathString = matches.join('');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('x', `return ${pathString};`) as (x: number) => number;\n}\n\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n */\nexport class PathParticle extends Particle\n{\n    /**\n     * The function representing the path the particle should take.\n     */\n    public path: Function;\n    /**\n     * The initial rotation in degrees of the particle, because the direction of the path\n     * is based on that.\n     */\n    public initialRotation: number;\n    /**\n     * The initial position of the particle, as all path movement is added to that.\n     */\n    public initialPosition: Point;\n    /**\n     * Total single directional movement, due to speed.\n     */\n    public movement: number;\n\n    /**\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n     */\n    constructor(emitter: Emitter)\n    {\n        super(emitter);\n        this.path = null;\n        this.initialRotation = 0;\n        this.initialPosition = new Point();\n        this.movement = 0;\n    }\n\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     */\n    public init(): void\n    {\n        // get initial rotation before it is converted to radians\n        this.initialRotation = this.rotation;\n        // standard init\n        this.Particle_init();\n\n        // set the path for the particle\n        this.path = this.extraData.path;\n        // cancel the normal movement behavior\n        this._doNormalMovement = !this.path;\n        // reset movement\n        this.movement = 0;\n        // grab position\n        this.initialPosition.x = this.position.x;\n        this.initialPosition.y = this.position.y;\n    }\n\n    /**\n     * Updates the particle.\n     * @param delta Time elapsed since the previous frame, in __seconds__.\n     */\n    public update(delta: number): number\n    {\n        const lerp = this.Particle_update(delta);\n        // if the particle died during the update, then don't bother\n\n        if (lerp >= 0 && this.path)\n        {\n            // increase linear movement based on speed\n            if (this._doSpeed)\n            {\n                const speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\n                this.movement += speed * delta;\n            }\n            else\n            {\n                const speed = this.speedList.current.value * this.speedMultiplier;\n\n                this.movement += speed * delta;\n            }\n            // set up the helper point for rotation\n            helperPoint.x = this.movement;\n            helperPoint.y = this.path(this.movement);\n            ParticleUtils.rotatePoint(this.initialRotation, helperPoint);\n            this.position.x = this.initialPosition.x + helperPoint.x;\n            this.position.y = this.initialPosition.y + helperPoint.y;\n        }\n\n        return lerp;\n    }\n\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     */\n    public destroy(): void\n    {\n        this.Particle_destroy();\n        this.path = this.initialPosition = null;\n    }\n\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n     * @param art The array of art data. For Particle, it should be an array of\n     *            Textures. Any strings in the array will be converted to\n     *            Textures via Texture.fromImage().\n     * @return The art, after any needed modifications.\n     */\n    public static parseArt(art: (Texture|string)[]): Texture[]\n    {\n        return Particle.parseArt(art);\n    }\n\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * PathParticle checks for the existence of path data, and parses the path data for use\n     * by particle instances.\n     * @param extraData The extra data from the particle config.\n     * @return The parsed extra data.\n     */\n    public static parseData(extraData: {path: string}): any\n    {\n        const output: any = {};\n\n        if (extraData && extraData.path)\n        {\n            try\n            {\n                output.path = parsePath(extraData.path);\n            }\n            catch (e)\n            {\n                if (ParticleUtils.verbose)\n                {\n                    console.error('PathParticle: error in parsing path expression');\n                }\n                output.path = null;\n            }\n        }\n        else\n        {\n            if (ParticleUtils.verbose)\n            {\n                console.error('PathParticle requires a path string in extraData!');\n            }\n            output.path = null;\n        }\n\n        return output;\n    }\n}\n","import { Particle } from './Particle';\nimport { Emitter } from './Emitter';\nimport { GetTextureFromString } from './ParticleUtils';\nimport { Texture } from 'pixi.js';\n\nexport interface ParsedAnimatedParticleArt\n{\n    textures: Texture[];\n    duration: number;\n    framerate: number;\n    loop: boolean;\n}\n\nexport interface AnimatedParticleArt\n{\n    framerate: 'matchLife'|number;\n    loop?: boolean;\n    textures: (string|Texture|{texture: string|Texture;count: number})[];\n}\n\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n * ```typescript\n * {\n *     //framerate is required. It is the animation speed of the particle in frames per\n *     //second.\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *     //particle, instead of at a constant framerate. This causes the animation to play\n *     //through one time, completing when the particle expires.\n *     framerate: 6,\n *     //loop is optional, and defaults to false.\n *     loop: true,\n *     //textures is required, and can be an array of any (non-zero) length.\n *     textures: [\n *         //each entry represents a single texture that should be used for one or more\n *         //frames. Any strings will be converted to Textures with Texture.from().\n *         //Instances of PIXI.Texture will be used directly.\n *         \"animFrame1.png\",\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\n *         //use that texture for 'count' frames sequentially.\n *         {\n *             texture: \"animFrame2.png\",\n *             count: 3\n *         },\n *         \"animFrame3.png\"\n *     ]\n * }\n * ```\n */\nexport class AnimatedParticle extends Particle\n{\n    /**\n     * Texture array used as each frame of animation, similarly to how MovieClip works.\n     */\n    private textures: Texture[];\n\n    /**\n     * Duration of the animation, in seconds.\n     */\n    private duration: number;\n\n    /**\n     * Animation framerate, in frames per second.\n     */\n    private framerate: number;\n\n    /**\n     * Animation time elapsed, in seconds.\n     */\n    private elapsed: number;\n\n    /**\n     * If this particle animation should loop.\n     */\n    private loop: boolean;\n\n    /**\n     * @param emitter The emitter that controls this AnimatedParticle.\n     */\n    constructor(emitter: Emitter)\n    {\n        super(emitter);\n\n        this.textures = null;\n        this.duration = 0;\n        this.framerate = 0;\n        this.elapsed = 0;\n        this.loop = false;\n    }\n\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     */\n    public init(): void\n    {\n        this.Particle_init();\n\n        this.elapsed = 0;\n\n        // if the animation needs to match the particle's life, then cacluate variables\n        if (this.framerate < 0)\n        {\n            this.duration = this.maxLife;\n            this.framerate = this.textures.length / this.duration;\n        }\n    }\n\n    /**\n     * Sets the textures for the particle.\n     * @param art An array of PIXI.Texture objects for this animated particle.\n     */\n    public applyArt(art: ParsedAnimatedParticleArt): void\n    {\n        this.textures = art.textures;\n        this.framerate = art.framerate;\n        this.duration = art.duration;\n        this.loop = art.loop;\n    }\n\n    /**\n     * Updates the particle.\n     * @param delta Time elapsed since the previous frame, in __seconds__.\n     */\n    public update(delta: number): number\n    {\n        const lerp = this.Particle_update(delta);\n        // only animate the particle if it is still alive\n\n        if (lerp >= 0)\n        {\n            this.elapsed += delta;\n            if (this.elapsed > this.duration)\n            {\n                // loop elapsed back around\n                if (this.loop)\n                {\n                    this.elapsed = this.elapsed % this.duration;\n                }\n                // subtract a small amount to prevent attempting to go past the end of the animation\n                else\n                {\n                    this.elapsed = this.duration - 0.000001;\n                }\n            }\n            // add a very small number to the frame and then floor it to avoid\n            // the frame being one short due to floating point errors.\n            const frame = ((this.elapsed * this.framerate) + 0.0000001) | 0;\n\n            this.texture = this.textures[frame] || Texture.EMPTY;\n        }\n\n        return lerp;\n    }\n\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     */\n    public destroy(): void\n    {\n        this.Particle_destroy();\n        this.textures = null;\n    }\n\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @param art The array of art data, properly formatted for AnimatedParticle.\n     * @return The art, after any needed modifications.\n     */\n    public static parseArt(art: AnimatedParticleArt[]): any\n    {\n        const outArr: ParsedAnimatedParticleArt[] = [];\n\n        for (let i = 0; i < art.length; ++i)\n        {\n            const data = art[i];\n            const output = outArr[i] = {} as ParsedAnimatedParticleArt;\n            const outTextures = output.textures = [] as Texture[];\n            const textures = data.textures;\n\n            for (let j = 0; j < textures.length; ++j)\n            {\n                let tex = textures[j];\n\n                if (typeof tex === 'string')\n                {\n                    outTextures.push(GetTextureFromString(tex));\n                }\n                else if (tex instanceof Texture)\n                {\n                    outTextures.push(tex);\n                }\n                // assume an object with extra data determining duplicate frame data\n                else\n                {\n                    let dupe = tex.count || 1;\n\n                    if (typeof tex.texture === 'string')\n                    {\n                        tex = GetTextureFromString(tex.texture);\n                    }\n                    else// if(tex.texture instanceof Texture)\n                    {\n                        tex = tex.texture;\n                    }\n                    for (; dupe > 0; --dupe)\n                    {\n                        outTextures.push(tex);\n                    }\n                }\n            }\n\n            // use these values to signify that the animation should match the particle life time.\n            if (data.framerate === 'matchLife')\n            {\n                // -1 means that it should be calculated\n                output.framerate = -1;\n                output.duration = 0;\n                output.loop = false;\n            }\n            else\n            {\n                // determine if the animation should loop\n                output.loop = !!data.loop;\n                // get the framerate, default to 60\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\n                // determine the duration\n                output.duration = outTextures.length / output.framerate;\n            }\n        }\n\n        return outArr;\n    }\n}\n"],"names":["ParticleUtils","pixi.VERSION","BLEND_MODES","Point","Texture","Sprite","pixiNS","Rectangle","Circle","settings","helperPoint"],"mappings":"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"}